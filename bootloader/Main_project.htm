<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Main_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Main_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Sep 02 14:40:30 2016
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[170]">send_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[170]">send_cmd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from main.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from ext_adc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">USB_EndPoint0</a> from usbcore.o(.text) referenced from usbuser.o(.constdata)
 <LI><a href="#[46]">USB_EndPoint1</a> from usbuser.o(.text) referenced from usbuser.o(.constdata)
 <LI><a href="#[47]">USB_EndPoint2</a> from usbuser.o(.text) referenced from usbuser.o(.constdata)
 <LI><a href="#[2a]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">USB_LP_CAN1_RX0_IRQHandler</a> from usbhw.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[44]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[43]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ac]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ad]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ae]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1af]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1b0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[178]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[59]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[52]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[5e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[54]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ca]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1cc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[4a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1cd]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[56]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[58]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[19d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1d1]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[6f]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApplication
</UL>

<P><STRONG><a name="[1d4]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d6]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[63]"></a>Timer_1ms_CallBack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer_1ms_CallBack &rArr; key_1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;men_1ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6c]"></a>Delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SETUP
</UL>

<P><STRONG><a name="[66]"></a>SET_CLOCK_SPEED</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SET_CLOCK_SPEED &rArr; SysTick_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>GPIO_SETUP</STRONG> (Thumb, 994 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_SETUP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>JumpToApplication</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JumpToApplication
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 742 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = main &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_UPDATE
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_SET_POS_TEXT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_PRINT_TEXT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_INIT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_CLEAR
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_CHECK_EVENT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApplication
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SETUP
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CLOCK_SPEED
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; Timer_1ms_CallBack &rArr; key_1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_1ms_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>iir_DEC_FILTER_1ORD</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, iir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iir_DEC_FILTER_1ORD
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>iir_DEC_FILTER_2ORD</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, iir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iir_DEC_FILTER_2ORD
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>iir_DEC_FILTER_4ORD</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, iir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iir_DEC_FILTER_4ORD
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>iir_DETECTOR</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, iir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iir_DETECTOR
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>adc_SETUP</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = adc_SETUP &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>mmc_write_sect</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WRITE_PAGE
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_disk
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
</UL>

<P><STRONG><a name="[93]"></a>mmc_read_sect</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_READ_PAGE
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[95]"></a>ext_adc_READ</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, ext_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_adc_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 962 bytes, Stack size 16 bytes, ext_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TIM1_UP_IRQHandler &rArr; reg_READ &rArr; rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adc_READ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_DETECTOR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_DEC_FILTER_4ORD
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_DEC_FILTER_2ORD
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_DEC_FILTER_1ORD
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_READ
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>key_1ms</STRONG> (Thumb, 598 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_1ms_CallBack
</UL>

<P><STRONG><a name="[75]"></a>key_CHECK_EVENT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, keyboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>reg_READ</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, reg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = reg_READ &rArr; rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_READ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_COPY_RTC_TO_BUFER
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>

<P><STRONG><a name="[a3]"></a>rtc_COPY_RTC_TO_BUFER</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, realtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_READ
</UL>

<P><STRONG><a name="[a4]"></a>rtc_READ</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, realtime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_READ
</UL>

<P><STRONG><a name="[167]"></a>SPI_SETUP</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, flash_at45db.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[a9]"></a>SPI_SendByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, flash_at45db.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WRITE_PAGE
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_READ_PAGE
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_sendCommand
</UL>

<P><STRONG><a name="[a8]"></a>SD_sendCommand</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, flash_at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_WRITE_PAGE
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DB_READ_PAGE
</UL>

<P><STRONG><a name="[92]"></a>AT45DB_WRITE_PAGE</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, flash_at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_sendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
</UL>

<P><STRONG><a name="[94]"></a>AT45DB_READ_PAGE</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, flash_at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_sendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[70]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApplication
</UL>

<P><STRONG><a name="[68]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SETUP
</UL>

<P><STRONG><a name="[ad]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[ae]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[88]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SETUP
</UL>

<P><STRONG><a name="[79]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_1ms
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SEND
</UL>

<P><STRONG><a name="[6a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SETUP
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SETUP
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_RESET
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SEND
</UL>

<P><STRONG><a name="[15b]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SEND
</UL>

<P><STRONG><a name="[8a]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
</UL>

<P><STRONG><a name="[8c]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
</UL>

<P><STRONG><a name="[8d]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
</UL>

<P><STRONG><a name="[8e]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
</UL>

<P><STRONG><a name="[8f]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
</UL>

<P><STRONG><a name="[90]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
</UL>

<P><STRONG><a name="[8b]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SETUP
</UL>

<P><STRONG><a name="[a5]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_COPY_RTC_TO_BUFER
</UL>

<P><STRONG><a name="[ac]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[166]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[165]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[96]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adc_READ
</UL>

<P><STRONG><a name="[97]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adc_READ
</UL>

<P><STRONG><a name="[9b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[af]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[82]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>FLASH_ProgramWord</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b2]"></a>USB_Reset_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>USB_Suspend_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>USB_WakeUp_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>USB_Configure_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[46]"></a>USB_EndPoint1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_EndPoint1 &rArr; MSC_BulkIn &rArr; MSC_MemoryRead &rArr; fat_read_data &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>USB_EndPoint2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_EndPoint2 &rArr; MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_MemoryRead &rArr; fat_read_data &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>MSC_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[d7]"></a>MSC_GetMaxLUN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[b6]"></a>MSC_MemoryRead</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_MemoryRead &rArr; fat_read_data &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>

<P><STRONG><a name="[b9]"></a>MSC_SetCSW</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>

<P><STRONG><a name="[ba]"></a>MSC_MemoryWrite</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_MemoryWrite &rArr; fat_write_data &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write_data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[c9]"></a>MSC_MemoryVerify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mscuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[bd]"></a>MSC_RWSetup</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MSC_RWSetup &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[be]"></a>DataInFormat</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
</UL>

<P><STRONG><a name="[bf]"></a>DataInTransfer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataInTransfer &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
</UL>

<P><STRONG><a name="[c0]"></a>MSC_TestUnitReady</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MSC_TestUnitReady &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[c1]"></a>MSC_RequestSense</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_RequestSense &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[c2]"></a>MSC_Inquiry</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[c3]"></a>MSC_ModeSense6</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_ModeSense6 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[c4]"></a>MSC_ModeSense10</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_ModeSense10 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[c5]"></a>MSC_ReadCapacity</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_ReadCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[c6]"></a>MSC_ReadFormatCapacity</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_ReadFormatCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[c7]"></a>MSC_GetCBW</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_GetCBW &rArr; MSC_MemoryRead &rArr; fat_read_data &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[b4]"></a>MSC_BulkIn</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_BulkIn &rArr; MSC_MemoryRead &rArr; fat_read_data &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
</UL>

<P><STRONG><a name="[b5]"></a>MSC_BulkOut</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_MemoryRead &rArr; fat_read_data &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[b3]"></a>USB_ResetCore</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[ca]"></a>USB_SetupStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_SetupStage &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[cb]"></a>USB_DataInStage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[cc]"></a>USB_DataOutStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[cd]"></a>USB_StatusInStage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[ce]"></a>USB_StatusOutStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[45]"></a>USB_EndPoint0</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USB_EndPoint0 &rArr; USB_GetStatus &rArr; USB_DataInStage &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetMaxLUN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Reset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>EP_Reset</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
</UL>

<P><STRONG><a name="[dc]"></a>EP_Status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[7a]"></a>USB_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>USB_Connect</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>USB_Reset</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>USB_Suspend</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>USB_WakeUp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>USB_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
</UL>

<P><STRONG><a name="[d8]"></a>USB_SetAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1a5]"></a>USB_Configure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[1a6]"></a>USB_ConfigEP</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[cf]"></a>USB_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[db]"></a>USB_EnableEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EnableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[dd]"></a>USB_DisableEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DisableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[de]"></a>USB_ResetEP</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ResetEP &rArr; EP_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[bb]"></a>USB_SetStallEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>

<P><STRONG><a name="[d9]"></a>USB_ClrStallEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ClrStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[c8]"></a>USB_ReadEP</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[b8]"></a>USB_WriteEP</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[2b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Reset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUp_Event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend_Event
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[e5]"></a>_sys_open</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[e8]"></a>_sys_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _sys_close &rArr; __fclose &rArr; fat_close_write &rArr; write_last_entry &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[ea]"></a>_sys_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[ec]"></a>_sys_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _sys_read &rArr; __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[17a]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[ee]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _sys_seek &rArr; __setfpos &rArr; fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[f0]"></a>_sys_flen</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _sys_flen &rArr; __getfsize &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[60]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[e9]"></a>__fclose</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, _fs_fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __fclose &rArr; fat_close_write &rArr; write_last_entry &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[f4]"></a>_fcreate</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, _fs_fcreate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _fcreate &rArr; fs_get_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_check_fwopen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[fa]"></a>_fdelete</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, _fs_fdelete.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fdelete &rArr; fs_BlockInvalid &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[fb]"></a>fs_rd_alloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
</UL>

<P><STRONG><a name="[f5]"></a>fs_adr_sig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _fs_flashio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
</UL>

<P><STRONG><a name="[ff]"></a>fs_get_freeID</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_get_freeID &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[f8]"></a>fs_get_freeMem</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_get_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[f7]"></a>fs_check_fwopen</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_check_fwopen
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[f9]"></a>fs_mark_freeMem</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_mark_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[f6]"></a>fs_rd_sig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
</UL>

<P><STRONG><a name="[100]"></a>fs_mark_fileMem</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_mark_fileMem &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[101]"></a>fs_Find_File</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_Find_File &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[f3]"></a>fs_WriteBlock</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_WriteBlock &rArr; fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ProgramPage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ProgramPage
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockFull
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>

<P><STRONG><a name="[107]"></a>fs_BlockFull</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_BlockFull &rArr; fs_WriteBlock &rArr; fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>

<P><STRONG><a name="[108]"></a>fs_AllocBlock</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fs_AllocBlock &rArr; fs_get_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_check_fwopen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>

<P><STRONG><a name="[fc]"></a>fs_BlockInvalid</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_BlockInvalid &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[fd]"></a>fs_InitBlock</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_InitBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_EraseSector
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[10b]"></a>fs_ReadBlock</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, _fs_flashio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_ReadBlock &rArr; fs_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[e7]"></a>__fopen</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, _fs_fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_params
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_drive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[f1]"></a>__getfsize</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, _fs_getfsize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __getfsize &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[ed]"></a>__read</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, _fs_read.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[ef]"></a>__setfpos</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, _fs_setfpos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __setfpos &rArr; fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[eb]"></a>__write</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, _fs_write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockFull
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[85]"></a>fdelete</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fs_fdelete.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = fdelete &rArr; fat_delete &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_params
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_drive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>fs_EraseSector</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_flashprg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
</UL>

<P><STRONG><a name="[104]"></a>fs_ProgramPage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_flashprg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[fe]"></a>fs_spi_ReadData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_flashprg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
</UL>

<P><STRONG><a name="[10a]"></a>fs_spi_EraseSector</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_flashprg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
</UL>

<P><STRONG><a name="[105]"></a>fs_spi_ProgramPage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_flashprg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[103]"></a>fn_cmp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fs_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_param
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
</UL>

<P><STRONG><a name="[102]"></a>fs_ReadData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fs_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
</UL>

<P><STRONG><a name="[106]"></a>fs_WriteData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fs_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[10d]"></a>fs_get_drive</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, fs_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[10c]"></a>fs_find_iob</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fs_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_find_iob &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[10f]"></a>fs_set_params</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, fs_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[117]"></a>fs_get_time</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fs_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = fs_get_time &rArr; reg_READ &rArr; rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[118]"></a>fs_get_date</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fs_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = fs_get_date &rArr; reg_READ &rArr; rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
</UL>

<P><STRONG><a name="[10e]"></a>fat_find_file</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[111]"></a>fat_create</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fat_create &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[110]"></a>fat_delete</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fat_delete &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[112]"></a>fat_read</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[114]"></a>fat_write</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>

<P><STRONG><a name="[f2]"></a>fat_close_write</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fat_close_write &rArr; write_last_entry &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>

<P><STRONG><a name="[113]"></a>fat_set_fpos</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>

<P><STRONG><a name="[b7]"></a>fat_read_data</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fat_read_data &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[bc]"></a>fat_write_data</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fat_write_data &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
</UL>

<P><STRONG><a name="[159]"></a>ssd_SEND</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_UPDATE
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_INIT
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_CLS
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SET_POS
</UL>

<P><STRONG><a name="[15c]"></a>ssd_RESET</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd_RESET
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_OLED_INIT
</UL>

<P><STRONG><a name="[15d]"></a>ssd_SET_POS</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssd_SET_POS &rArr; ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SEND
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_UPDATE
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_CLEAR
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_CLS
</UL>

<P><STRONG><a name="[15e]"></a>ssd_CLS</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ssd_CLS &rArr; ssd_SET_POS &rArr; ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SET_POS
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SEND
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_OLED_INIT
</UL>

<P><STRONG><a name="[15f]"></a>ssd_INIT</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssd_INIT &rArr; ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SEND
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_OLED_INIT
</UL>

<P><STRONG><a name="[160]"></a>ssd_OLED_INIT</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ssd_OLED_INIT &rArr; ssd_INIT &rArr; ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_INIT
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_CLS
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_INIT
</UL>

<P><STRONG><a name="[78]"></a>vga_UPDATE</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vga_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vga_UPDATE &rArr; ssd_SET_POS &rArr; ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SET_POS
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SEND
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_INIT
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>vga_SET_DRAW_MODE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vga_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_INIT
</UL>

<P><STRONG><a name="[80]"></a>vga_CLEAR</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vga_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vga_CLEAR &rArr; ssd_SET_POS &rArr; ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_SET_POS
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_INIT
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>vga_INIT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vga_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vga_INIT &rArr; ssd_OLED_INIT &rArr; ssd_INIT &rArr; ssd_SEND
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_UPDATE
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_SET_DRAW_MODE
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_CLEAR
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_OLED_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>vga_DRAW_DATA8</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, vga_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vga_DRAW_DATA8
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_PRINT_CHAR
</UL>

<P><STRONG><a name="[76]"></a>vga_SET_POS_TEXT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vga_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>vga_PRINT_CHAR</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vga_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vga_PRINT_CHAR &rArr; vga_DRAW_DATA8
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_DRAW_DATA8
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_PRINT_TEXT
</UL>

<P><STRONG><a name="[77]"></a>vga_PRINT_TEXT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, vga_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vga_PRINT_TEXT &rArr; vga_PRINT_CHAR &rArr; vga_DRAW_DATA8
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vga_PRINT_CHAR
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>men_1ms</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_1ms_CallBack
</UL>

<P><STRONG><a name="[164]"></a>spi_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SETUP
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[74]"></a>disk_initialize</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_initialize &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLK_FAST
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLK_SLOW
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[176]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[179]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __getfsize &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[1d9]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = freopen &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[7c]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[7d]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[182]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1da]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_COPY_RTC_TO_BUFER
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd_INIT
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_disk
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mbr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_br
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_label
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
</UL>

<P><STRONG><a name="[184]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[183]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[e6]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[a6]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_COPY_RTC_TO_BUFER
</UL>

<P><STRONG><a name="[1e0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[181]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[175]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[174]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[18b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[17b]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1e1]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[18d]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[180]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[18e]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[186]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[1e2]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1e3]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[190]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[51]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[192]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[196]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[194]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[19b]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[1e7]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[55]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[1e8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[18f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[198]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[7f]"></a>fread</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, freadfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[5c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[197]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[191]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[19c]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[1a1]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[19f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[19e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1a2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[d2]"></a>USB_GetDescriptor</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_GetDescriptor &rArr; USB_DataInStage &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[d0]"></a>USB_GetStatus</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_GetStatus &rArr; USB_DataInStage &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[d1]"></a>USB_SetClrFeature</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, usbcore.o(i.USB_SetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_SetClrFeature &rArr; USB_ClrStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[d3]"></a>USB_SetConfiguration</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, usbcore.o(i.USB_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_SetConfiguration &rArr; USB_EnableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[d5]"></a>USB_SetInterface</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, usbcore.o(i.USB_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_SetInterface &rArr; USB_EnableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[177]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1a9]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[1a8]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[62]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SETUP
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[61]"></a>SysTick_Config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CLOCK_SPEED
</UL>

<P><STRONG><a name="[ab]"></a>SetSysClockTo72</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[aa]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b1]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[119]"></a>write_sector</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mbr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write_data
</UL>

<P><STRONG><a name="[11a]"></a>write_cache</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_br
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_label
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[11e]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mbr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_br
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_label
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
</UL>

<P><STRONG><a name="[11d]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mbr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_br
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
</UL>

<P><STRONG><a name="[11b]"></a>write_fsinfo</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[11f]"></a>cache_fat</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[121]"></a>get_fat_sect</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>

<P><STRONG><a name="[122]"></a>get_u16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mbrec
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>

<P><STRONG><a name="[120]"></a>count_free_clus</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[125]"></a>get_u32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mbrec
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
</UL>

<P><STRONG><a name="[123]"></a>read_sector</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mbrec
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read_data
</UL>

<P><STRONG><a name="[124]"></a>get_fsinfo</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[129]"></a>is_fat_valid</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[126]"></a>get_bootrec</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[127]"></a>get_mbrec</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[128]"></a>init_dev</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mbrec
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_fat_valid
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[12a]"></a>get_time</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = get_time &rArr; fs_get_time &rArr; reg_READ &rArr; rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_label
</UL>

<P><STRONG><a name="[12b]"></a>get_date</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = get_date &rArr; fs_get_date &rArr; reg_READ &rArr; rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_label
</UL>

<P><STRONG><a name="[12d]"></a>val_char_lab</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_label
</UL>

<P><STRONG><a name="[12c]"></a>write_label</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_lab
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12e]"></a>write_br</STRONG> (Thumb, 526 bytes, Stack size 8 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12f]"></a>write_mbr</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[130]"></a>chk_param</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cmp
</UL>

<P><STRONG><a name="[131]"></a>wipe_disk</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[134]"></a>clus_to_sect</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[133]"></a>write_dot_entries</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = write_dot_entries &rArr; get_date &rArr; fs_get_date &rArr; reg_READ &rArr; rtc_COPY_RTC_TO_BUFER &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[135]"></a>clear_clus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[136]"></a>write_fat_link</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_fat_link &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[13a]"></a>get_EOC</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[138]"></a>clus_in_use</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clus_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
</UL>

<P><STRONG><a name="[137]"></a>get_free_clus</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_in_use
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[139]"></a>alloc_new_clus</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = alloc_new_clus &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[14a]"></a>lfn_copy_name</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfn_copy_name
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[144]"></a>lfn_calc_chksum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfn_calc_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[13c]"></a>val_char_sn</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>

<P><STRONG><a name="[13b]"></a>val_char</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>

<P><STRONG><a name="[13d]"></a>cvt_fatname</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cvt_fatname &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[146]"></a>sfn_cmp_name</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_cmp_name
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[145]"></a>lfn_cmp_name</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfn_cmp_name
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[143]"></a>is_EOC</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fs_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[13e]"></a>set_next_clus</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[13f]"></a>get_dir_sect</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_dir_sect &rArr; clus_to_sect
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[140]"></a>check_lfn</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[141]"></a>search_for_name</STRONG> (Thumb, 586 bytes, Stack size 112 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_cmp_name
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_cmp_name
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
</UL>

<P><STRONG><a name="[147]"></a>check_name</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[148]"></a>get_nt_name</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_nt_name &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[149]"></a>write_entries</STRONG> (Thumb, 768 bytes, Stack size 112 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_copy_name
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[14b]"></a>alloc_name</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = alloc_name &rArr; alloc_new_clus &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[14c]"></a>find_name</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = find_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[14e]"></a>get_dir_name</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_dir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[14d]"></a>fat_find_dir</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_name
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[14f]"></a>set_time_date</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
</UL>

<P><STRONG><a name="[151]"></a>lfn_copy_info</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
</UL>

<P><STRONG><a name="[150]"></a>get_next_info</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_copy_info
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_date
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>

<P><STRONG><a name="[152]"></a>unlink_clus_chain</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unlink_clus_chain &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
</UL>

<P><STRONG><a name="[153]"></a>delete_entries</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = delete_entries &rArr; unlink_clus_chain &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[154]"></a>chk_dir_empty</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = chk_dir_empty &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[155]"></a>read_cache</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_cache &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[156]"></a>write_last_entry</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_last_entry &rArr; write_sector &rArr; mmc_write_sect &rArr; AT45DB_WRITE_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[157]"></a>read_last_entry</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fs_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_last_entry &rArr; read_sector &rArr; mmc_read_sect &rArr; AT45DB_READ_PAGE &rArr; SD_sendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[158]"></a>rename_entries</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, fs_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[171]"></a>FCLK_SLOW</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[172]"></a>FCLK_FAST</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[169]"></a>xmit_spi</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, spi_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>

<P><STRONG><a name="[168]"></a>rcvr_spi</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcvr_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>

<P><STRONG><a name="[16a]"></a>wait_ready</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_ready &rArr; rcvr_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[16b]"></a>deselect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deselect &rArr; rcvr_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[16c]"></a>select</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = select &rArr; deselect &rArr; rcvr_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[16d]"></a>power_on</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_on
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[173]"></a>power_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[16e]"></a>rcvr_datablock</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
</UL>

<P><STRONG><a name="[16f]"></a>xmit_datablock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, spi_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
</UL>

<P><STRONG><a name="[170]"></a>send_cmd</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, spi_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[44]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
