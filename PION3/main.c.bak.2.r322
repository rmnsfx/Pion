/**
  ******************************************************************************
  * @file    Project/Template/main.c 
  * @author  MCD Application Team
  * @version V3.1.0
  * @date    06/19/2009
  * @brief   Main program body
  ******************************************************************************
  * @copy
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
  */ 

/* Includes ------------------------------------------------------------------*/
#include "stm32f10x.h"
#include <stdio.h>
//nclude <io.h>
#include "FILTER.h"
#include "File_Config.h"
#include <string.h>
#include <math.h>
#include "stm32f10x_exti.h"
#include "stm32f10x_iwdg.h"
#include "usb.h"
#include "usbcfg.h"
#include "usbhw.h"
#include "usbcore.h" 
#include "mscuser.h"
#include "memory.h"
#include "type.h"
#include "FileIO.h"
#include "wav.h"
#include "IIR.h"
#include "ADC.h"
#include "Pin.h"
#include "ssd1303.h"
#include "FM25V10.h"
#include "FLASH_AT45DB.h"
#include "EXT_ADC.h"
#include "vga_lib.h"
#include "Types.h"
#include "Keyboard.h"
#include "Menu.h"
#include "Reg.h"
#include "RealTime.h"
#include "Road.h"
#include "ff.h"
#include "diskio.h"



  extern  FATFS   fls=0;            
  extern  FIL     FileTmp=0;          
	extern  FRESULT res_t=0; 
	extern 	FILINFO fno=0;
//#include "Backup.h"
//#include "m25p80.h"
 #define TIME_POWER_OFF	(10*60*1000)

 //u32 GLOBAL_TIMER_1ms = 0;
int GLOBAL_TIMER_1ms = 0;
int POWER_OFF = TIME_POWER_OFF;

 //s16 DELAY_MESUARE = -1;
 u32 GLOBAL_ERROR;
 extern int USB_CONNECT=0;
 extern u8	measure_stat=0;
 extern u8	usb_stat=0; 
 extern unsigned int	Num_of_Signals=0;
 u16 test_reg;
 u16 Sec_timer;
 u16 Moto_Sec;		//мотосекунды
 u8  Flag_1S;
 float		   k_reg;
 
unsigned int prgb_bat = 0;


 u16 T;
 

 
int first_flag = 0; /// флаг первого включения
int message_status = 0;

int timer1=0;
int timer2=0;
 
int frzbat1=0;
int frzbat2=0; 
 

 #define GET_SYS_TIMER() 	GLOBAL_TIMER_1ms;
 #define SET_SYS_TIMER(set)	GLOBAL_TIMER_1ms = set;

#define FULL_BATTERY_VOLT 4500
	

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
 USART_InitTypeDef USART_InitStructure;
 GPIO_InitTypeDef  GPIO_InitStructure;
 DMA_InitTypeDef   DMA;
 ADC_InitTypeDef   ADC_InitStructure;

 //ISingleChFrame SIM[16000];
 

 u8				buf[10];			
extern Tmen_status				men_STATUS;
 //IDubleChFrame  DUB[1000];
extern unsigned int road_pos;
extern unsigned int road_cursor_pos;

 
//BYTE  Memory[MSC_MemorySize];  /* MSC RAM */


//BYTE Memory[MSC_MemorySize];                  // MSC Memory in RAM

 //BYTE Memory[RAM_SIZE];     



//#define MEM2 (BYTE *)0x20000000

//BYTE MEM[MSC_ImageSize];

//калбак функция

void Timer_1ms_CallBack(void)
{
				IWDG_ReloadCounter();
			// pin_DEBUG(HIGTH);
			 GLOBAL_TIMER_1ms++;
			 
			 key_1ms();
			 men_1ms();

			 //if (DELAY_MESUARE>0) DELAY_MESUARE--;
			 //if (POWER_OFF>0) POWER_OFF--;
				
			POWER_OFF--;
				
			 if (Sec_timer==0) {
								Sec_timer = 1000; 
								Flag_1S   = 1;
								 }
								else Sec_timer--;

			 /*pin_KEY(HIGTH);
			 pin_KEY(LOW);
			 pin_KEY(HIGTH); */
			 //pin_DEBUG(LOW);
			
			if (timer1 == 1000) 
			{
				timer1 = 0;
				timer2++;
			}
			else timer1++;
			
			if (timer2 == 30) timer2 = 0; ///30 секунд
									
}
/*
void msDELAY(unsigned int msTIME)
{
  SET_SYS_TIMER(0);
  while (GET_SYS_TIMER
} */

/* Private functions ---------------------------------------------------------*/

void InitAll(void)
{
   RCC->APB2ENR	|= RCC_APB2ENR_IOPCEN;		// Подали такты на порт. Без этого работать не будет. 
						// Жоские вилы STM32 =))) А в симуляторе без этого работает на ура
 


   GPIOC->CRH   |= GPIO_CRH_MODE12_0;  		// Настроили порт на выход
   return;
}

void Delay(long i)
{
 while (i>0) i--;
}

void SET_CLOCK_SPEED(unsigned char CLOCK)
{
 if (CLOCK)
  if ((RCC->CFGR & RCC_CFGR_SWS)!=RCC_CFGR_SWS_PLL)
   {
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);

	
   }
  else;
 else
  if ((RCC->CFGR & RCC_CFGR_SWS)!=RCC_CFGR_SWS_HSI)  
   {
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));

	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
   }
 
 if (CLOCK)	SysTick_Config(9000*8);	//настройка 1ms таймера  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
 else		SysTick_Config(8000); //настройка 1ms таймера  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
     
}


void GPIO_SETUP()
{
  GPIO_InitTypeDef  GPIO_InitStructure; 

   //включаем порт A
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   //настраиваем выход P0
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   //GPIO_SetBits(GPIOA,GPIO_Pin_4);
   GPIO_Init(GPIOA, &GPIO_InitStructure);
   //настраиваем вход аналоговый вход PFI
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   GPIO_Init(GPIOA, &GPIO_InitStructure);
   //настраиваем вход USB5V
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   GPIO_Init(GPIOA, &GPIO_InitStructure);
   //настраиваем вход DISCHARGE
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_Init(GPIOA, &GPIO_InitStructure);
   //настраиваем выход SPI MCS
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOA,GPIO_Pin_4);
   GPIO_Init(GPIOA, &GPIO_InitStructure);
   //настраиваем выход SPI MCLK,MISO,MOSI
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOA,GPIO_Pin_5);
   GPIO_SetBits(GPIOA,GPIO_Pin_7);
   GPIO_Init(GPIOA, &GPIO_InitStructure);

   //входы A8-A15 пропускаем

   //включаем порт B
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
   //настраиваем вход KEY1
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем вход KEY2
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //входы B2-B4 пропускаем
   //настраиваем выход CS
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;															  
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOB,GPIO_Pin_5);
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем выход RES
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   pin_SSD_RES(LOW);
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем выход D/C
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOB,GPIO_Pin_7);
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем выход WR
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOB,GPIO_Pin_8);
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем выход RD
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOB,GPIO_Pin_9);
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем вход KEY3
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем вход KEY4
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   GPIO_Init(GPIOB, &GPIO_InitStructure); 	
   //внешний АЦП
   //настраиваем ADC_CS
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   //GPIO_SetBits(GPIOB,GPIO_Pin_12);
   pin_ADC_CS(LOW);
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем ADC_CLK
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   pin_ADC_CLK(LOW);
   //GPIO_SetBits(GPIOB,GPIO_Pin_12);
   GPIO_Init(GPIOB, &GPIO_InitStructure);
   //настраиваем ADC_DATA
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;//GPIO_Mode_IPU; //наверно нужно настроить как плавающий вход
   GPIO_Init(GPIOB, &GPIO_InitStructure);


   //включаем порт C
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
   //настраиваем выход D0-D7
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7);
   GPIO_Init(GPIOC, &GPIO_InitStructure);
   //настраиваем вход KEY5
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   GPIO_Init(GPIOC, &GPIO_InitStructure);
   //настраиваем выход 13V_ON
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   pin_13V(LOW);
   GPIO_Init(GPIOC, &GPIO_InitStructure);
   //настраиваем выход DISC
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOC,GPIO_Pin_11);
   GPIO_Init(GPIOC, &GPIO_InitStructure);
    //настраиваем выход OFF
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_ResetBits(GPIOC,GPIO_Pin_12);
	 
	 GPIO_ResetBits(GPIOC,GPIO_Pin_13);
   GPIO_Init(GPIOC, &GPIO_InitStructure);

   //включаем порт D
   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
   //включаем порт 3.3VA_ON
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   //GPIO_SetBits(GPIOD,GPIO_Pin_2);
   pin_3VA(OFF);
   GPIO_Init(GPIOD, &GPIO_InitStructure);

//**добавлено для кового варианта*******
//вкл. /выкл.
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_SetBits(GPIOC,GPIO_Pin_9);
   GPIO_Init(GPIOC, &GPIO_InitStructure);
	 
//	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   GPIO_Init(GPIOA, &GPIO_InitStructure);
	 RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
	 
	 AFIO->EXTICR[0] &= ~AFIO_EXTICR3_EXTI9_PA;
	 AFIO->EXTICR[0] |= AFIO_EXTICR3_EXTI9_PA;
	 EXTI->FTSR |= EXTI_FTSR_TR9;
	 EXTI->IMR |= EXTI_IMR_MR9;
	 NVIC_SetPriority(EXTI9_5_IRQn, 15);
	NVIC_EnableIRQ(EXTI9_5_IRQn);
	 //************
	 
	// RCC_APB1PeriphResetCmd(RCC_APB1Periph_BKP,ENABLE);
}

void ShowPowerOffForm ( void )
{
  vga_CLEAR();
  vga_SET_POS_TEXT(28,25);
  //vga_PRINT_STR("Выключение",&FONT_7x10_bold);
	vga_PRINT_STR("ВЫКЛЮЧЕНИЕ",&FONT_7x10_bold);
	vga_UPDATE();

}

void EXTI9_5_IRQHandler ( void )
{
	uint32_t i;
	
	rod_DEINIT();
	SET_CLOCK_SPEED(CLK_72MHz); 
	
  ShowPowerOffForm();
  for(i=0;i<0x1FFFFF;i++){__NOP();}	

	
	pin_OFF();

	
}

void NVIC_Configuration(void)
{
  NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the USARTy Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
}

/*
U16 FIL(U16 val)
{
 static U16 buf[8]={0,0,0,0,0,0,0,0};
 static U8  i = 0;
 static U32 SUM = 0;

 buf[i++] = val;
 if (i==4) i = 0;

 SUM = (buf[0]+buf[1]+buf[2]+buf[3]);

 return	 (U16)SUM;

}
*/
U16 TINGULAR(U16 max,U16 Freq)
{
  static U32 val = 0 ;


  val+=(unsigned long)max*65536/Freq;

  if (val>=(unsigned long)max*65536) val = 0;

  return val>>16;
}

void progressbar_percent(void)
{
	 char str_out2[5];
	 int ii = 1000;
	
	 while (ii--)
	 {
			vga_CLEAR();
			vga_SET_POS_TEXT(1,1);
			vga_PRINT_STR("Форматирование...",&FONT_6x8);
		 
			vga_SET_POS_TEXT(1,20);
			sprintf(str_out2,"%.1f%%", (1000 - ii)/10.0);		 								
			vga_PRINT_STR(str_out2,&FONT_6x8);
			vga_UPDATE();			
		 
	 }	 
	 
}



//процедура форматирования дискаа
TStatus FORMAT(void)
{
  FILE * pFile;
  unsigned char temp_data[512];
	s8 i;
	char str_out[5];
	int i2=0;

	finit();
	
	fat_init();
	
		
	vga_CLEAR();
	men_SHOW_MESSAGE("Форматирование...","",0);
	
	
			/// Прогресс-бар
			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,vga_GET_WIDTH_DISPLAY-3,33,drRECT_NO_FILL);
			vga_UPDATE();	
			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,20,33,drRECT_FILL);
			vga_UPDATE();	
	
IWDG_ReloadCounter();
	
	memset(temp_data,0,512);
	
IWDG_ReloadCounter();
	
  //форматирование
  mmc_format();//очистка флэш, создание таблицы FAT


			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,vga_GET_WIDTH_DISPLAY-3,33,drRECT_NO_FILL);
			vga_UPDATE();		
			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,60,33,drRECT_FILL);
			vga_UPDATE();	
	
	
	IWDG_ReloadCounter();
	
 	REGW(NUMFILE,1);
	REGW(NUMFILE_CURENT,0);
	REGW(ROUTE_NUM,0);
	REGW(BEYOND_ROAD,1);
	//REGW(15,0x00);
  IWDG_ReloadCounter();
	
	//if (finit()!=0)
	//return _ERR;   //ошибка, форматирование не помогло
  //else	    
	  


 	//i = rod_CreateFile();

	
	

			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,vga_GET_WIDTH_DISPLAY-3,33,drRECT_NO_FILL);
			vga_UPDATE();	
			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,100,33,drRECT_FILL);
			vga_UPDATE();	

IWDG_ReloadCounter();

 	i = rod_CreateFile_edit();	
	//i = rod_create_files();


			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,vga_GET_WIDTH_DISPLAY-3,33,drRECT_NO_FILL);
			vga_UPDATE();	
			vga_SET_DRAW_MODE(drMODE_NORMAL);
			vga_RECTANGLE(1,30,vga_GET_WIDTH_DISPLAY-3,33,drRECT_FILL);
			vga_UPDATE();	
			
IWDG_ReloadCounter();
	
			Delay(1400000);
	
			vga_CLEAR();
			vga_SET_POS_TEXT(1,1);
			sprintf(str_out,"Форматирование");		 								
			vga_PRINT_STR(str_out,&FONT_6x8);
			vga_UPDATE();						
			vga_SET_POS_TEXT(1,12);
			sprintf(str_out,"завершено.");		 								
			vga_PRINT_STR(str_out,&FONT_6x8);
			vga_UPDATE();	

IWDG_ReloadCounter();

			Delay(1500000);
	

	

	
			return _OK;
	
	
}

TStatus FAT_Init(void)
{
  u32 res;
  
  //тест FAT
  res = finit();

  if (res==1)
    //ошибка Flash
	return _ERR;
  else
  	if (res>1) 
	  return FORMAT();	 //пытаемся отформатировать

  return _OK;	 
}

void CONTROL_BAT(unsigned char MIN_VAL_BAT)
{

	char t_str[20];
	
	
	//измерение заряда бата
	//REGW(BAT,adc_BAT_PERCENT_edit()); //записываем в регистр, измеренное значение
	//if (REG(BAT)<=MIN_VAL_BAT)   //если заряд меньше ?		
	
	if (adc_BAT_PERCENT_edit() <= 10 && adc_BAT_PERCENT_edit() > 1 && message_status == 0 && measure_stat == 0)   //если заряд меньше 10		

   {
    		 
		vga_CLEAR();					
		vga_SET_POS_TEXT(5,20);
		vga_PRINT_STR("Заряд аккумулятора", &FONT_6x8);
		vga_SET_POS_TEXT(5,30);
		vga_PRINT_STR("меньше 10% ...",&FONT_6x8);		
		vga_UPDATE();		
		
		message_status = 1; ///Флаг однократного показа 
		 
		Delay (2500000);
		
		men_SHOW_MAINFORMS(form_MESUARE); 		 
		
	 }
//vga_SET_POS_TEXT(5,40);		 
//sprintf(t_str,"%d",adc_BAT_MEASURE_edit());		 
//vga_PRINT_STR(t_str,&FONT_6x8);
		
if (adc_BAT_PERCENT_edit() == 0 && measure_stat == 0)   
	{	
		vga_CLEAR();					
		vga_SET_POS_TEXT(5,20);
		vga_PRINT_STR("Аккумулятор", &FONT_6x8);
		vga_SET_POS_TEXT(5,30);
		vga_PRINT_STR("разряжен.",&FONT_6x8);		

	
		vga_UPDATE();						
		 
		Delay(5000000);
		//for(i=0;i<0x2FFFFF;i++){__NOP();}

		ShowPowerOffForm();
		 
		Delay(5000000);
		 
		//pin_SSD_RES(LOW);		 
		vga_CLEAR();
		vga_UPDATE();
    pin_OFF(); //отключаем
	
  }
 
}

void UPDATE_MODE_REG()
{
unsigned int 		temp_reg;
static unsigned int old_mode_reg = 0;

	temp_reg = REG(CHANEL_MESUARE);

 	switch (temp_reg)
						 {
						  case 0x01: temp_reg = (temp_reg<<8)|REG(FILTER_A);	   //ускорение
						  			 break;
						  case 0x02: temp_reg = (temp_reg<<8)|REG(FILTER_V);	   //скорость
						  			 break;
						  case 0x04: temp_reg = (temp_reg<<8)|REG(FILTER_S);	   //перемещение
						  			 break;
						  case 0x08: temp_reg = (temp_reg<<8);
						  			 break;
						  default  : temp_reg = 0;
						 }
  if (old_mode_reg!=temp_reg)
   {
    REGW(MODE_REG,temp_reg);
	old_mode_reg = temp_reg;
	//очистить регистры
	REGWDEF(RMS_VAL);
	REGWDEF(PIK_VAL);
	REGWDEF(PIK_PIK_VAL);
	REGWDEF(PIK_FACTOR_VAL);

   }
  
}


void CONTROL_RTC(void)
{
//событие 1 секунда
  if (rtc_CHECK_EVENT_1S())
	 {
	  rtc_COPY_RTC_TO_BUFER();
	  REGW(YEAR,rtc_READ(rtc_YEAR));
	  REGW(DATA,rtc_READ(rtc_MON)*100+rtc_READ(rtc_DAY));
	  REGW(TIME,rtc_READ(rtc_HOUR)*100+rtc_READ(rtc_MIN));
	  REGW(SECOND,rtc_READ(rtc_SEC));
	 }     
}	

void START_MESUARE(void)
{
  //ext_adc_SAMPLING(ext_adc_SIM,ext_SAMPLING_SIZE); //сбросить выборку
	  	  
  //питание аналоговой части
  pin_3VA(ON);
  ext_adc_START();	//старт внешнего АЦП
	  

  //reg_WRITE(PION_STATUS,reg_READ(PION_STATUS)|ST_MESUARE);	  //установить бит в регистре
  //DELAY_MESUARE = 0;//2000;//1500; //задержка в мс
  REGW(SAMPLING_STATUS,0); //присваиваем состояние ожидания
  REGW(PION_STATUS,REG(PION_STATUS)|ST_MESUARE);	  //установить бит в регистре				    
  ext_adc_SAMPLING(ext_adc_SIM,ext_SAMPLING_SIZE);  //задаем параметры выборки
  
}

void STOP_MESUARE(void)
{
 
 pin_3VA(OFF);
 ext_adc_STOP();	//стоп внешнего АЦП

 REGW(PION_STATUS,REG(PION_STATUS)&(~ST_MESUARE));  //сбросить бит в регистре
 if (REG(SAMPLING_STATUS)==0) REGWDEF(SAMPLING_STATUS); //присваиваем состояние ожидания

 //DELAY_MESUARE = -1;

 
}

void CONTROL_CHARGE()
{
 //если зарядка то отключаем
 //if (pin_CHARGE==0) pin_OFF();
}

void CONTROL_POWER(u8 RESET)
{
		 if (key_STATE > 0) POWER_OFF = TIME_POWER_OFF; 

		 if (pin_USB_5V) POWER_OFF = TIME_POWER_OFF; 	
			
		 if (POWER_OFF <= 0) 	
		 {
				ShowPowerOffForm();
				Delay(700000); 
				vga_CLEAR();
				vga_UPDATE();	
				pin_OFF();
		 }
	
}



void MESUARE_PROCESS(void)
{
  //unsigned int temp_reg;
  float		   reg_1;
  float		   reg_2;
  float		   rms_reg;
 
  	  //расчет RMS
		  k_reg = ((float)REG(K_VIBRO)/1000);  //коэффициент
			
		  //rms_reg = iir_RETURN_RMS(&DETECTOR)*((float)REG(K_VIBRO)/1000);

      	  switch (REG(MODE_REG))
		   {
		    //ускорение
		    case 0x0101: //канал ускорения
						 k_reg = k_reg/3;//30
						 break; 
			case 0x0102: //канал ускорения
						 k_reg = k_reg/3;//30
						 break;
			case 0x0104: //канал ускорения
						 k_reg = k_reg/3;//30
						 break; 
			case 0x0108: //канал ускорения
						 k_reg = k_reg/3;//30
						 break;
			case 0x0110: //канал ускорения
						 k_reg = k_reg/3;//30
						 break;
			//скорость
			case 0x0201: k_reg = k_reg*114/3;	//канал скорости, 2-1000Гц	  //114
						 //temp_reg = sqrt(rms_reg*rms_reg-3*3); //вычитаем шум 0,3мм/с
						 //temp_reg = rms_reg;
						 break;
			case 0x0202: k_reg = k_reg*20.916/3;	//канал скорости, 10-1000Гц // 14,925
						 break;
			case 0x0204: k_reg = k_reg*20.916/3;	//канал скорости, 10-2000Гц
						 break;
			case 0x0208: k_reg = k_reg*20.916/3;	//канал скорости, 10-5000Гц
						 break;
		    //перемещение
			case 0x0401: k_reg = k_reg*395.570/300;	//канал перемещения, 10-300Гц //208.986
						 break;
			default: 	 //temp_reg = 0; 
						 break;		
		   }
		  //расчет СКЗ
		  rms_reg = iir_RETURN_RMS(&DETECTOR)*k_reg;  
		  if (REG(MODE_REG)==0x0201) rms_reg = sqrt(rms_reg*rms_reg-20*20); //вычитаем шум для диапазон 2-1000 Гц	  //шум = 0.20 мм/с

		  REGW(RMS_VAL,rms_reg);						 	//заносим результат измерения в регистр
		  //расчет пик
		  reg_1 = iir_RETURN_MAX_PIK(&DETECTOR);
		  reg_2 = iir_RETURN_MIN_PIK(&DETECTOR)*(-1);
		  if (reg_1<reg_2) reg_1 = reg_2; 
		  reg_1 = reg_1*k_reg;

			if (REG(MODE_REG)==0x0101) 
		   if (reg_1>4) reg_1-=4; else reg_1=0;	
			if (REG(MODE_REG)==0x0102) 
		   if (reg_1>4) reg_1-=4; else reg_1=0;			
			if (REG(MODE_REG)==0x0104) 
		   if (reg_1>7) reg_1-=7; else reg_1=0;	
			if (REG(MODE_REG)==0x0108) 
		   if (reg_1>14) reg_1-=14; else reg_1=0;	
			
			if (REG(MODE_REG)==0x0201) 
		   if (reg_1>70) reg_1-=70; else reg_1=0;	
			if (REG(MODE_REG)==0x0202) 
		   if (reg_1>8) reg_1-=8; else reg_1=0;	
			if (REG(MODE_REG)==0x0204) 
		   if (reg_1>8) reg_1-=8; else reg_1=0;	
			if (REG(MODE_REG)==0x0208) 
		   if (reg_1>10) reg_1-=10; else reg_1=0;
			
		  if (REG(MODE_REG)==0x0401) 
		   if (reg_1>5) reg_1-=5; else reg_1=0;			//вычитаем амплитудный шум = 2 мкм
		  
			
		  REGW(PIK_VAL,reg_1);						   	//заносим результат измерения в регистр

		  //расчет пик-фактора
		  if (rms_reg>5) reg_1 = reg_1/rms_reg;
		  else			  reg_1 = 0;
		  REGW(PIK_FACTOR_VAL,reg_1*100);

		  //расчет пик-пик
		  reg_1 = iir_RETURN_PIK_PIK(&DETECTOR)*k_reg;
		  if (reg_1<0) reg_1 = 0;
			
			if (REG(MODE_REG)==0x0101) 
		   if (reg_1>8) reg_1-=8;else reg_1=0;	
			if (REG(MODE_REG)==0x0102) 
		   if (reg_1>8) reg_1-=8;else reg_1=0;	
			if (REG(MODE_REG)==0x0104) 
		   if (reg_1>14) reg_1-=14;else reg_1=0;	
			if (REG(MODE_REG)==0x0108) 
		   if (reg_1>30) reg_1-=30;else reg_1=0;	
			
			if (REG(MODE_REG)==0x0201) 
		   if (reg_1>130) reg_1-=130;else reg_1=0;	
			if (REG(MODE_REG)==0x0202) 
		   if (reg_1>20) reg_1-=20;else reg_1=0;	
			if (REG(MODE_REG)==0x0204) 
		   if (reg_1>20) reg_1-=20;else reg_1=0;	
			if (REG(MODE_REG)==0x0208) 
		   if (reg_1>20) reg_1-=20;else reg_1=0;
			
		  if (REG(MODE_REG)==0x0401) 
		   if (reg_1>10) reg_1-=10;else reg_1=0;			//вычитаем амплитудный шум = 4 мкм
			
		  REGW(PIK_PIK_VAL,reg_1);					  	//заносим результат измерения в регистр
	  	  
	  	  
}


void JumpToApplication(uint32_t addr)
{
  typedef  void (*pFunction)(void);
  pFunction Jump_To_Application;
  uint32_t JumpAddress;
  //if(addr>=0x08005000)
  //{
    JumpAddress = *(uint32_t*) (addr + 4);
    Jump_To_Application = (pFunction) JumpAddress;
    /* Initialize user application's Stack Pointer */
    __set_MSP(*(vu32*) addr);
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, addr-0x8000000);
    Jump_To_Application();
 // }
}






int main(void)

{


  unsigned int fl=0;
  unsigned int temp_reg;  
  unsigned int i = 0, j = 0;
  char 		  FileName[25];
	char temp[25];
	FIL Fil;
  FILE * pRFile;
	unsigned char persent_bat_char = 5;	
	uint16_t Number,Num;	
	measure_stat = 0;	
	
	
	
	
		
  GPIO_SETUP();
  //CONTROL_CHARGE();
  Delay(100000);
  Delay(100000);
  Delay(100000);	

	
  //контроль зарядки
 // CONTROL_CHARGE();
   //подать 13В
  pin_13V(HIGTH);
  Delay(100000);
  Delay(100000);
  Delay(100000);
  
  SystemInit();
  SET_CLOCK_SPEED(CLK_72MHz); 
  //инициализация внутреннего АЦП и проверка заряда бата-----------------------------//
  adc_SETUP();
  

  USB_Init();                                        // USB Initialization
  vga_INIT();
	
	
  first_flag = 1; /// Флаг первого включения
	
	
	
	
  //минимальная диагностика----------------------------------------------------------//
  if (rtc_SETUP()==_ERR) GLOBAL_ERROR|=0x01;	//тест часов
  //FORMAT();
  if (FAT_Init() ==_ERR) GLOBAL_ERROR|=0x04;;	//тест фат
  if (reg_SETUP()==_ERR) GLOBAL_ERROR|=0x02;	//начальная инициализация регистров
  GLOBAL_ERROR = 0;
  
	

	
	
	if (GLOBAL_ERROR>0) 	 //если есть ошибка
  						{	   
						 temp_reg = 0;
						 //выводим сообщение об ошибке 
						 vga_PRINT_STR("ERROR:",&FONT_6x8);
						 
						 if (GLOBAL_ERROR&0x01)   {vga_SET_POS_TEXT(5,++temp_reg*10);vga_PRINT_STR("Часы",&FONT_6x8);}
						 if (GLOBAL_ERROR&0x02)   {vga_SET_POS_TEXT(5,++temp_reg*10);vga_PRINT_STR("Инициализация FLASH",&FONT_6x8);}
						 if (GLOBAL_ERROR&0x04)   {vga_SET_POS_TEXT(5,++temp_reg*10);vga_PRINT_STR("Инициализация FAT16",&FONT_6x8);}
						 
						 vga_UPDATE();
						 //виснем!
						 while (1) {}
						 CONTROL_BAT(0);
						}

		
					

						
   if (REG(NUMFILE)==0) //установлен лок байт
    {
	 //форматируем
	 vga_SET_POS_TEXT(1,1);
	 vga_PRINT_STR("Ошибка записи FAT16",&FONT_6x8);
	 vga_SET_POS_TEXT(1,25);
	 vga_PRINT_STR("Форматировать...?",&FONT_6x8);
	 vga_UPDATE();
	 //сохринить калибровочный параметр
	 //BKP_WriteBackupRegister(BKP_DR2, REG(K_VIBRO));
		
		while(1)	
		if (key_CHECK_EV(key_EVENT_PRESSED_ENTER)) 
		{ 
			vga_CLEAR();
			vga_UPDATE();
			FORMAT();				   //нужно ли форматировать!!!!!!!! плохо это!!!!
			
			ShowPowerOffForm();
			Delay(700000); 
			vga_CLEAR();
			vga_UPDATE();	
			pin_OFF();
		}
		else
		{
			if (key_CHECK_EV(key_EVENT_PRESSED_ESC_MENU)) 
			{
				ShowPowerOffForm();
				Delay(700000); 
				vga_CLEAR();
				vga_UPDATE();	
				pin_OFF();
			}
		}
		
	 //записать калибровочный параметр
	 //REGW(K_VIBRO,BKP_ReadBackupRegister(BKP_DR2));
	 //NVIC_SystemReset();
	}
   else
    {
	  REGW(NUMFILE_CURENT,REG(NUMFILE));
	}
  

	
	//---------------------------------------------------------------------------------//
	if (REG(LOCK_REG) != 100)
	{
	MakeTIK();
	vga_UPDATE();		
	for(i=0;i<0x2FFFFF;i++){__NOP();}
	}	
//REGW(ROUTE_NUM,88);
  ext_adc_SETUP(20);//16 - 62.5 кГц//20 - 50кГц
  //ext_adc_START();
  	

	
	men_SETUP();
  	

  SET_CLOCK_SPEED(CLK_8MHz); 
  ///SET_CLOCK_SPEED(CLK_72MHz);
  //CONTROL_BAT(0);
  /* Infinite loop */

  //задаем новую конфигурацию меню, если нажаты кнопки "верх","вниз"
  if ((key_CHECK_ST(key_UP))&&(key_CHECK_ST(key_DOWN))) 
   men_SET_CONFIG(0x80);
  //расчет нормирующего коэфф. для записи в файл выборки
  /*if (BKP_ReadBackupRegister(BKP_DR2)!=0)
  											{
											 REGW(K_VIBRO,BKP_ReadBackupRegister(BKP_DR2));
											 BKP_WriteBackupRegister(BKP_DR2,0);
											}*/		

  k_reg = ((float)REG(K_VIBRO)/1000);
  k_reg = k_reg/(30*10); 

	//k_reg_mul = (float)3.735/10;
  //загружаем мотосекунды
  Moto_Sec = BKP_ReadBackupRegister(BKP_DR3);
						

	
	while (1) //начало основного цикла
  {
		
				
	
		
   //------------- Наработка -------------------------------------------------//
   if (Flag_1S)
	{
	 if (Moto_Sec==3600)
	  {
	   Moto_Sec = REG(MOTO_REG);
	   if (Moto_Sec<65000) REGW(MOTO_REG,++Moto_Sec);
	   Moto_Sec = 0;
	  }
	 else
	  Moto_Sec++;
	 Flag_1S = 0;
	 BKP_WriteBackupRegister(BKP_DR3, Moto_Sec);
	}

	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
  IWDG_SetPrescaler(IWDG_Prescaler_256);
  //IWDG_SetReload(0xFF);
	IWDG_SetReload(0x400);
  IWDG_Enable();

	
	
/*	
	__disable_irq();
	__disable_fiq();
	//f_mount(&fls, "0:", 1);
	f_open(&FileLog,"system.log", FA_OPEN_ALWAYS | FA_WRITE);
	f_printf(&FileLog,"test");
	f_close(&FileLog);
	f_mount(0,"0:", 0);
	__enable_irq();
	__enable_fiq();
*/
	

	
	
   //----------- USB ---------------------------------------------------------//
   if (USB_CONNECT!=pin_USB_5V)
	 {
	  USB_CONNECT = pin_USB_5V;
		 

		 
	  if (USB_CONNECT)  //если было событие подключен USB
	    {
				
				if ( adc_BAT_MEASURE_edit() < 3600 ) 						
				{
					BKP_WriteBackupRegister(BKP_DR10, 0); 				
					LED_CHARGE_ON();
					CHARGE_ON();					
				}
				
				STOP_MESUARE();
				rod_DEINIT();
				measure_stat = 0;
				rod_DEINIT();	
				Delay(200000);				   //антидребезговая задержка		
						
				
				//жесткий костыль ))
				if (REG(LOCK_REG) == 100) REGW(LOCK_REG,99);
				else 
				{
					REGW(LOCK_REG,100);
					__enable_irq();
					__enable_fiq();
					NVIC_SystemReset();
				}
				
				

	     SET_CLOCK_SPEED(CLK_72MHz);
								
			 men_SHOW_MAINFORMS(form_CHARGE);
		 	

				
		}
	  else 			   
	    {
					//Alex	
					usb_stat = 0;				
					vga_CLEAR();
					vga_SET_POS_TEXT(1,1);
					vga_PRINT_STR("Подождите...",&FONT_6x8);
					vga_UPDATE();
					temp_reg = 0;
					/*for (i=0;i<5;i++)
					{
						for (j=0;j<=50;j++)
						{
							sprintf(FileName,"M:\\%03d\\Signal %d.dat",i,j);
							if ((pRFile = fopen (FileName,"rb")) != NULL) {temp_reg++; fclose(pRFile);}
						}
					}*/
				
					__disable_irq();
					__disable_fiq();
				
					f_mount(&fls, "0:", 1);
				
					for (j=0;j<=255;j++)
					{
						sprintf(FileName,"M:\\%03u.%03u\\Signal %d.dat",0,0,j);
						if (f_stat(FileName, &fno) == FR_OK) temp_reg++;
						//if ((pRFile = fopen (FileName,"rb")) != NULL) {temp_reg++; fclose(pRFile);}
					}
					
					
					f_open(&FileTmp,"Roads.txt", FA_CREATE_ALWAYS | FA_WRITE);
					for(i=0;i<255;i++)
					{
						sprintf(FileName,"Road.%03u",i);
						if (f_stat(FileName, &fno) == FR_OK)
						{
							f_printf(&FileTmp,FileName);
							f_putc('\n',&FileTmp);
						}
						
					}
					f_close(&FileTmp);



					
					  f_getlabel("", FileName, 0);
						if(strcmp(FileName, "PION-3"))
						{
							f_setlabel("PION-3");
						}
					f_mount(0,"0:", 0);
					__enable_irq();
					__enable_fiq();
						
					
					Num_of_Signals = temp_reg;
					
					REGW(BEYOND_ROAD,temp_reg+1);
					i = 0;
					j = 0;
					//*Alex
			if ((pRFile = fopen ("M:\\prog1.bin","rb")) != NULL) 
			{
					JumpToApplication(0x8000000);
					road_pos = 0;
					road_cursor_pos = 0;
			}	
					//AT45DB_WRITE_DATA(473,0,&BlockName[0],26);
					
		 //rod_INIT();		
		 SET_CLOCK_SPEED(CLK_8MHz); 
		 Delay(200000);				   //антидребезговая задержка
						
		 frzbat1 = adc_BAT_PERCENT_edit();	///Обновляем индикацию АКБ	
		
		 men_SHOW_MAINFORMS(form_MESUARE); 
			
		}		
		
	  USB_Connect(USB_CONNECT); 			
		
	 }


	
 
	 
   //-------------------------------------------------------------------------//
   //USB отключен, работаем в нормальном режиме
   //-------------------------------------------------------------------------//
	if (!USB_CONNECT)  
	{
			

						
						///Проверка "без маршрута" 
						f_mount(&fls, "0:", 1);				
						f_open(&Fil,"0:Road.000", FA_OPEN_ALWAYS | FA_WRITE);				
						if (f_size(&Fil) != 1600) create_road000();
						f_close(&Fil);
						f_mount(0,"0:", 0);
		
						///CONTROL_BAT(0);
						LED_CHARGE_OFF();
						CHARGE_OFF();
						//Alex
						if ((measure_stat == 0)&&key_CHECK_EV(key_EVENT_PRESSED_MESUARE)) measure_stat = 1;
						if ((measure_stat == 1)&&key_CHECK_EV(key_EVENT_RELEASED_MESUARE)) measure_stat = 2;
						if ((measure_stat == 2)&&key_CHECK_EV(key_EVENT_PRESSED_MESUARE)) measure_stat = 3;
						if ((measure_stat == 3)&&key_CHECK_EV(key_EVENT_RELEASED_MESUARE)) measure_stat = 0;
						
						//ловим событие нажатия кн. "измерение"
						if ((measure_stat == 1)&&(men_STATUS==men_MAIN))
						{
								SET_CLOCK_SPEED(CLK_72MHz);
								START_MESUARE();								
						}

						 
						
						//ловим событие отжатия кн. "измерение"
						if (measure_stat == 0)
						{
								STOP_MESUARE();

								if (ext_adc_GET_STATUS()==ext_adc_STATUS_STOP)
								{
										i++;
								}

								SET_CLOCK_SPEED(CLK_8MHz);
						}

					 
						if (measure_stat == 0) CONTROL_BAT(0); ///Проверка АКБ на разряд только вне режима измерения
					 
					 
						CONTROL_POWER(1); ///Выключение в теч. 10 мин., если не нажата кнопка


						//расчет скз или выборка
						if ((REG(PION_STATUS)&ST_MESUARE)>0)
						{
								if (REG(MODE_REG)==0x0800) //выборка
								{
										REGW(SAMPLING_STATUS,ext_adc_GET_PROCESS());	 	//ожидание выборки
								}
								else MESUARE_PROCESS();								    //обычный режим измерения
										
						}

						//контроль перегрузки канала
						if (ext_adc_OVER>0)
								REGW(PION_STATUS,REG(PION_STATUS)|ST_OVER);	  //установить бит перегрузка в регистре
						else
								REGW(PION_STATUS,REG(PION_STATUS)&(~ST_OVER)); //сбросить бит перегрузка в регистре

							
						ext_adc_OVER = 0;										 //сбрасываем признак перегрузка канала
					

					
						//контроль вывода
						if (men_MENU_CONTROL()) CONTROL_POWER(1);
						else					CONTROL_POWER(0);
						
						//обновить режим
						UPDATE_MODE_REG();

	}	//конец - USB отключен, работаем в нормальном режиме
		
	else  
	{
		CONTROL_POWER(0);
		
		if (usb_stat) men_SHOW_MAINFORMS(form_USB);
		else  men_SHOW_MAINFORMS(form_CHARGE);
	
	}
	

 } //конец основного цикла
	
	

}//конец программы

 


/*
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
/*
PUTCHAR_PROTOTYPE
{
  // Place your implementation of fputc here 
  // e.g. write a character to the USART 
  USART_SendData(EVAL_COM1, (uint8_t) ch);

  // Loop until the end of transmission 
  while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
  {}

  return ch;
} */

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/**
  * @}
  */


/******************* (C) COPYRIGHT 2009 STMicroelectronics *****END OF FILE****/
